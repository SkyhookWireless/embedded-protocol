syntax = "proto3";

/*
 * Buffer streams exchanged between client and server are comprised of the
 * following sequence of encoded (serialized) protocol buffer messages (except
 * for the first byte, which is as an unsigned char representing the length of
 * the encoded header message).
 *
 * +-----------+----------------------------+--------------------+========================================================================+
 * | header len| Encoded RqHeader/RsHeader  | Encoded CryptoInfo || Encoded, padded and encrypted Rq/Rs body (with optional Config in Rs) |
 * | (1 byte)  | (variable length < 256)    | (variable length)  || (variable length)                                                     |
 * +-----------+----------------------------+--------------------+========================================================================+
 *
 * The Rq/Rs body is padded (AES has a 16-byte block length) and encrypted
 * after serialization and decrypted and de-padded before deserialization. The
 * header length byte, header, and CryptoInfo fields are not encrypted.
 *
 * ClientConfig is included in response only when the request_client_conf flag
 * of the RqHeader is true.  Config parameters override the corresponding
 * default values in client only when they are non-zero.
 */
/* clang-format off */

message RqHeader {
    int32 partner_id = 1;
    int32 crypto_info_length = 2;
    int32 rq_length = 3; // Includes any AES padding
    uint32 sw_version = 4;
    bool request_client_conf = 5;
}

message RsHeader {
    enum Status {
        SUCCESS = 0;
        UNSPECIFIED_ERROR = 1;
        BAD_PARTNER_ID_ERROR = 2;
        DECODE_FAILURE_ERROR = 3;
        API_SERVER_ERROR = 4;
    }

    int32 crypto_info_length = 1;
    int32 rs_length = 2; // Includes any AES padding
    Status status = 3;
}

message CryptoInfo {
    bytes iv = 1; // Always 16 bytes in length
    int32 aes_padding_length = 2;
}

// Message body definitions.
//
message Rq {
    bytes device_id = 1;
    uint64 timestamp = 2; // Seconds since epoch (Jan 1, 1970)
    Aps aps = 3;
    Vaps vaps = 4;
    GsmCells gsm_cells = 5;
    UmtsCells umts_cells = 6;
    LteCells lte_cells = 7;
    CdmaCells cdma_cells = 8;
    NbiotCells nbiot_cells = 9;
    Gnss gnss = 10;
}

message Aps {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any AP
    uint32 common_freq_plus_1 = 2;   // Valued only if all frequency values are the same.
    uint32 common_age_plus_1 = 3;    // Valued only if all age values are the same.
    repeated int64 mac = 4;
    repeated int32 frequency = 5;    // Not valued if all frequency are the same.
    repeated uint32 neg_rssi = 6;    // -rssi
    repeated uint32 age = 7;         // Not valued if all ages are the same.
}

message Vaps {
    repeated bytes vap = 1; // len, AP index(8bit), nibble index(4bit), replacement nibble(4bit)
}

message GsmCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 lac = 5;
    repeated uint32 ci = 6;
    repeated uint32 neg_rssi = 7;    // -rssi
    repeated uint32 age = 8;
}

message UmtsCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 lac = 5;
    repeated uint32 ucid = 6;
    repeated uint32 neg_rssi = 7;    // -rscp
    repeated uint32 age = 8;
}

message CdmaCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 sid = 3;
    repeated uint32 nid = 4;
    repeated uint32 bsid = 5;
    repeated uint32 neg_rssi = 6;    // -rssi
    repeated uint32 age = 7;
}

message LteCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 tac = 5;
    repeated uint32 eucid = 6;
    repeated uint32 neg_rssi = 7;    // -rsrp
    repeated uint32 age = 8;
}

message NbiotCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 tac = 5;
    repeated uint32 e_cellid = 6;
    repeated uint32 neg_rssi = 7;    // -nrsrp
    repeated uint32 age = 8;
}

message Gnss {
    repeated int32 lat = 1;          // Actual latitude times 10^6
    repeated int32 lon = 2;          // Actual longitude times 10^6
    repeated uint32 hpe = 3;
    repeated int32 alt = 4;          // Actual altitude times 10
    repeated uint32 vpe = 5;
    repeated uint32 speed = 6;       // Actual speed times 10
    repeated uint32 bearing = 7;
    repeated uint32 nsat = 8;
    repeated uint32 age = 9;
}

message Rs {
    enum Source {
        UNKNOWN = 0;
        HYBRID = 1;
        CELL = 2;
        WIFI = 3;
        GNSS = 4;
    }

    double lat = 1;
    double lon = 2;
    uint32 hpe = 3;
    Source source = 4;
    ClientConfig config = 5;
    bytes used_aps = 6;               // Bitmap denoting whether an AP was Used by server
                                      // Big endian. Length = (number of APs + 7) / 8
                                      // Least Sig Bit of last byte corresponds to first AP
                                      // Least Sig Bit of second to last byte corresponds to ninth AP etc
                                      // Aps are counted based on their position in the request
}

message ClientConfig {                        // zero value means 'not overridden' i.e use default
    uint32 total_beacons = 1;                 // Number of beacons in a request
    uint32 max_ap_beacons = 2;                // Number of APs in a request
    uint32 cache_match_threshold = 3;         // % of matching APs required (obsolete)
    uint32 cache_age_threshold = 4;           // Maximum age of cacheline (hours)
    uint32 cache_beacon_threshold = 5;        // Minimun number of Used APs required to use low threshold
    uint32 cache_neg_rssi_threshold = 6;      // Minimum strength of AP
    uint32 cache_match_all_threshold = 7;     // % of matching APs required (high threshold)
    uint32 cache_match_used_threshold = 8;    // % of matching Used APs required (low threshold)
}
