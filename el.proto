syntax = "proto3";

/*
 * Buffer streams exchanged between client and server are comprised of the
 * following sequence of encoded (serialized) protocol buffer messages (except
 * for the first byte, which represents the length of the encoded header
 * message).
 *
 * +-----------+----------------------------+--------------------+============================================+
 * | header len| Encoded RqHeader/RsHeader  | Encoded CryptoInfo || Encoded, padded and encrypted Rq/Rs body ||
 * | (1 byte)  | (variable length < 256)    | (variable length)  || (variable length)                        ||
 * +-----------+----------------------------+--------------------+============================================+
 *
 * The Rq/Rs body is padded (AES has a 16-byte block length) and encrypted
 * after serialization and decrypted and de-padded before deserialization. The
 * header length byte, header and CryptoInfo fields are not encrypted. 
 */
/* clang-format off */

message RqHeader {
    int32 partner_id = 1;
    int32 crypto_info_length = 2;
    int32 rq_length = 3; // Includes any AES padding
}

message RsHeader {
    enum Status {
        SUCCESS = 0;
        UNSPECIFIED_ERROR = 1;
        BAD_PARTNER_ID_ERROR = 2;
        DECODE_FAILURE_ERROR = 3;
        API_SERVER_ERROR = 4;
    }

    int32 crypto_info_length = 1;
    int32 rs_length = 2; // Includes any AES padding
    Status status = 3;
}

message CryptoInfo {
    bytes iv = 1; // Always 16 bytes in length
    int32 aes_padding_length = 2;
}

// Message body definitions.
//
message Rq {
    bytes device_id = 1;
    uint64 timestamp = 2; // Seconds since epoch (Jan 1, 1970)
    Aps aps = 3;
    GsmCells gsm_cells = 4;
    UmtsCells umts_cells = 5;
    LteCells lte_cells = 6;
    CdmaCells cdma_cells = 7;
    NbiotCells nbiot_cells = 8;
}

message Aps {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any AP
    uint32 common_frequency = 2;     // Valued only if all frequency values are the same.
    uint32 common_age_plus_1 = 3;    // Valued only if all age values are the same.
    repeated int64 mac = 4;
    repeated int32 frequency = 5;    // Not valued if all frequency are the same. Use common_frequency
    repeated uint32 neg_rssi = 6;    // -rssi
    repeated uint32 age = 7;         // Not valued if all ages are the same. Use common_age_plus_1
}

message GsmCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 lac = 5;
    repeated uint32 ci = 6;
    repeated uint32 neg_rssi = 7;    // -rssi
    repeated uint32 age = 8;
}

message UmtsCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 lac = 5;
    repeated uint32 ci = 6;
    repeated uint32 neg_rssi = 7;    // -rscp
    repeated uint32 age = 8;
}

message CdmaCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 sid = 3;
    repeated uint32 nid = 4;
    repeated uint32 bsid = 5;
    repeated uint32 neg_rssi = 6;    // -rssi
    repeated uint32 age = 7;
}

message LteCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 tac = 5;
    repeated uint32 eucid = 6;
    repeated uint32 neg_rssi = 7;    // -rsrp
    repeated uint32 age = 8;
}

message NbiotCells {
    uint32 connected_idx_plus_1 = 1; // 0 means that device is not connected to any beacon
    uint32 common_age_plus_1 = 2;    // Valued only if all age values are the same.
    repeated uint32 mcc = 3;
    repeated uint32 mnc = 4;
    repeated uint32 tac = 5;
    repeated uint32 e_cellid = 6;
    repeated uint32 neg_rssi = 7;   // -nrsrp
    repeated uint32 age = 8;
}

message Rs {
    enum Source {
        UNKNOWN = 0;
        HYBRID = 1;
        CELL = 2;
        WIFI = 3;
        GNSS = 4;
    }

    double lat = 1;
    double lon = 2;
    uint32 hpe = 3;
    Source source = 4;
}
